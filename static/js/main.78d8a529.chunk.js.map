{"version":3,"sources":["components/RandomName/RandName.js","App.js","index.js"],"names":["RandNames","variable","useState","name","setName","names","setNames","random","setRandom","className","style","display","height","textAlign","fontSize","fontWeight","color","flexDirection","maxHeight","justifyContent","width","htmlFor","onKeyDown","e","key","id","type","value","onChange","target","onClick","document","getElementById","focus","filter","Math","floor","length","choice1","choice2","drawTwo","window","confirm","map","tname","App","setVariable","newVar","prompt","charAt","slice","toUpperCase","RandName","ReactDOM","render","StrictMode"],"mappings":"0LA4DeA,EA1DG,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACRC,mBAAS,IADD,mBACzBC,EADyB,KACnBC,EADmB,OAENF,mBAAS,IAFH,mBAEzBG,EAFyB,KAElBC,EAFkB,OAGJJ,mBAAS,MAHL,mBAGzBK,EAHyB,KAGjBC,EAHiB,KAWhC,OACE,sBAAKC,UAAU,aAAf,UACE,qBAAKC,MAAO,CACVC,QAASJ,EAAS,QAAU,OAC5BK,OAAQ,OACRC,UAAW,SACXC,SAAU,OACVC,WAAY,MACZC,MAAO,WANT,SAQLT,IAEK,sBAAKG,MAAO,CAACC,QAAS,OAAQM,cAAe,UAA7C,UAEA,2CAAchB,EAAd,OACF,uBAAMS,MAAO,CAAEQ,UAAW,OAAQP,QAAS,OAAQQ,eAAgB,SAAUC,MAAO,QAApF,UACA,uBAAOV,MAAO,CAAEQ,UAAW,QAAUG,QAAQ,OAAOC,UAAW,SAACC,GAC9D,GAAa,UAAVA,EAAEC,IAAgB,CACnB,IAAIrB,EAAM,OACVG,EAAS,GAAD,mBAAKD,GAAL,CAAYF,KACpBC,EAAQ,MAETqB,GAAG,aAAaC,KAAK,OAAOC,MAAOxB,EAAMyB,SAAU,SAACL,GAAD,OAAOnB,EAAQmB,EAAEM,OAAOF,UAC5E,yBAAQG,QAAS,WACX3B,IACJG,EAAS,GAAD,mBAAKD,GAAL,CAAYF,KACpBC,EAAQ,IACR2B,SAASC,eAAe,cAAcC,UAJxC,iBAKQhC,QAEN,yBAAQ6B,QAAS,WACbtB,EAAUH,EAAM6B,QAAO,SAAA/B,GAAI,OAAIA,IAASI,KAAS4B,KAAKC,MAAMD,KAAK5B,SAAWF,EAAMgC,QAAU9B,EAAS,EAAI,OAD7G,mBAEYN,KACZ,wBAAQ6B,QAAS,kBAAMtB,EAvCb,WACd,IAAM8B,EAAUjC,EAAO8B,KAAKC,MAAMD,KAAK5B,SAAWF,EAAMgC,SAClDE,EAAUlC,EAAM6B,QAAO,SAAA/B,GAAI,OAAIA,IAASmC,KAAUH,KAAKC,MAAMD,KAAK5B,UAAYF,EAAMgC,OAAS,KACnG,MAAM,GAAN,OAAUC,EAAV,gBAAyBC,GAoCYC,KAAjC,uBACA,wBAASV,QAAS,WACbW,OAAOC,QAAQ,gDAChBpC,EAAS,IACTF,EAAQ,IACRI,EAAU,QAJd,0BAOCH,EAAMgC,OAAS,GAAK,8BAAIpC,EAAJ,gBAA2BI,EAAMsC,KAAI,SAAAxC,GAAI,OAAI,uBAAMO,MAAO,CAACC,QAAQ,SAAtB,UAAiCR,EAAjC,IAAuC,sBAAMO,MAAO,CAACM,MAAO,OAAQc,QAAS,kBAAMxB,EAAS,YAAID,EAAM6B,QAAO,SAAAU,GAAK,OAAIA,IAAUzC,QAAzF,+BClClG0C,EAfH,WAAO,IAAD,EACgB3C,mBAAS,IADzB,mBACTD,EADS,KACC6C,EADD,KAEhB,OACE,sBAAKrC,UAAU,MAAf,UACG,yBAAQqB,QAAS,WAChB,IAAIiB,EAASC,OAAO,0BACqB,MAArCD,EAAOE,OAAOF,EAAOV,OAAS,KAAYU,EAASA,EAAOG,MAAM,GAAI,IACxEJ,EAAYC,EAAOE,OAAO,GAAGE,cAAgBJ,EAAOG,MAAM,KAH3D,cAIIjD,EAAW,aAAe,WAC9BA,GAAY,cAACmD,EAAD,CAAWnD,SAAUA,QCVxCoD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASC,eAAe,W","file":"static/js/main.78d8a529.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst RandNames = ({variable}) => {\n  const [name, setName] = useState('');\n  const [names, setNames] = useState([]);\n  const [random, setRandom] = useState(null);\n\n  const drawTwo = () => {\n    const choice1 = names[(Math.floor(Math.random() * names.length))]\n    const choice2 = names.filter(name => name !== choice1)[(Math.floor(Math.random() * (names.length - 1)))]\n    return `${choice1} and ${choice2}` \n  };\n\n  return (\n    <div className=\"rand_names\">\n      <div style={{\n        display: random ? 'block' : 'none',\n        height: '40px',\n        textAlign: 'center',\n        fontSize: '36px',\n        fontWeight: '800',\n        color: 'darkred'\n      }}>\n{random}\n      </div>\n      <div style={{display: 'flex', flexDirection: 'column'}}>\n      \n      <label>Enter {variable}s</label>\n    <span style={{ maxHeight: '60px', display: 'flex', justifyContent: 'center', width: '100%' }}>\n    <input style={{ maxHeight: '60px' }} htmlFor='name' onKeyDown={(e) => {\n      if(e.key === 'Enter'){\n        if(!name) return;\n        setNames([...names, name]) \n        setName('')\n      }\n    }} id='name_input' type='text' value={name} onChange={(e) => setName(e.target.value)}/>\n      <button onClick={() => {\n        if(!name) return;\n        setNames([...names, name]) \n        setName('')\n        document.getElementById('name_input').focus()\n      }}>Add {variable}</button>\n      </span>  \n        <button onClick={() => {\n            setRandom(names.filter(name => name !== random)[(Math.floor(Math.random() * names.length - (random ? 1 : 0)))])\n          }}> Draw {variable}</button>\n        <button onClick={() => setRandom(drawTwo())}> Draw Two</button>\n        <button  onClick={() => {\n          if(window.confirm('Are you sure you want to empty the bucket?')){\n            setNames([])\n            setName('')\n            setRandom(null)\n          } \n        }}>Empty Bucket</button>\n        {names.length > 0 && <p>{variable}s in Bucket: {names.map(name => <span style={{display:'block'}}>{name} <span style={{color: 'red'}} onClick={() => setNames([...names.filter(tname => tname !== name)])}>x</span></span>)}</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default RandNames;\n","import './App.css';\r\nimport { useState } from 'react';\r\nimport RandNames from './components/RandomName/RandName';\r\n// import SpinTheBottle from './components/SpinTheBottle';\r\n\r\nconst App = () => {\r\n  const [variable, setVariable] = useState('');\r\n  return (\r\n    <div className=\"app\">\r\n       <button onClick={() => {\r\n        let newVar = prompt('What are you choosing?');\r\n        if (newVar.charAt(newVar.length - 1) === 's') newVar = newVar.slice(0, -1)\r\n        setVariable(newVar.charAt(0).toUpperCase() + newVar.slice(1));\r\n      }}> {variable ? 'New Choice' : 'Start'}</button>\r\n      {variable && <RandNames variable={variable} />}\r\n      {/* <SpinTheBottle/> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}